package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/neccarus/chirpy/internal/database"
	"github.com/neccarus/chirpy/internal/handler"
	"log"
	"net/http"
	"os"
	"sync/atomic"
	"time"
)

type apiConfig struct {
	fileServerHits atomic.Int32
	dbQueries      database.Queries
	platform       string
}

func (cfg *apiConfig) middleWareMetricsInc(next http.Handler) http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		cfg.fileServerHits.Add(1)
		next.ServeHTTP(writer, request)
	})
}

func (cfg *apiConfig) HitMetrics(writer http.ResponseWriter, request *http.Request) {
	writer.Header().Add("Content-Type", "text/html; charset=utf-8")
	hits := cfg.fileServerHits.Load()
	html := fmt.Sprintf("<html>\n  "+
		"<body>\n    "+
		"<h1>Welcome, Chirpy Admin</h1>\n    "+
		"<p>Chirpy has been visited %d times!</p>\n  "+
		"</body>\n</html>", hits)
	_, err := writer.Write([]byte(html))
	if err != nil {
		fmt.Printf(err.Error())
	}
	fmt.Printf("Hits: %d\n", hits)
}

func (cfg *apiConfig) Reset(writer http.ResponseWriter, request *http.Request) {

	if cfg.platform == "dev" {
		cfg.dbQueries.Reset(request.Context())
		cfg.fileServerHits.Store(0)
		fmt.Println("Reset hits")
	} else {
		writer.WriteHeader(http.StatusForbidden)
	}
}

func (cfg *apiConfig) CreateUser(writer http.ResponseWriter, request *http.Request) {

	type parameters struct {
		Email string `json:"email"`
	}

	type User struct {
		ID        uuid.UUID `json:"id"`
		CreatedAt time.Time `json:"created_at"`
		UpdatedAt time.Time `json:"updated_at"`
		Email     string    `json:"email"`
	}

	decoder := json.NewDecoder(request.Body)
	params := parameters{}
	err := decoder.Decode(&params)
	if err != nil {
		log.Printf("Error decoding parameters: %s", err)
		writer.WriteHeader(http.StatusInternalServerError)
		return
	}

	context := request.Context()
	user, err := cfg.dbQueries.CreateUser(context, params.Email)
	if err != nil {
		log.Printf("Error creating user: %s", err)
	}
	responseBody := User{
		ID:        user.ID,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
		Email:     user.Email,
	}

	data, err := json.Marshal(responseBody)
	if err != nil {
		log.Printf("Error marshalling JSON: %s", err)
		writer.WriteHeader(http.StatusInternalServerError)
		return
	}

	writer.Header().Add("Content-Type", "application/json")
	writer.WriteHeader(http.StatusCreated)
	writer.Write(data)
}

func (cfg *apiConfig) CreateChirp(writer http.ResponseWriter, request *http.Request) {

	type Chirp struct {
		ID        uuid.UUID `json:"id"`
		CreatedAt time.Time `json:"created_at"`
		UpdatedAt time.Time `json:"updated_at"`
		Body      string    `json:"body"`
		UserID    uuid.UUID `json:"user_id"`
	}

	type ResponseBody struct {
		Chirp
		Error string `json:"error"`
	}

	type RequestBody struct {
		UserID uuid.UUID `json:"user_id"`
		Body   string    `json:"body"`
	}

	decoder := json.NewDecoder(request.Body)
	params := database.CreateChirpParams{}
	requestBody := RequestBody{}

	err := decoder.Decode(&requestBody) // Had to decode into RequestBody and convert over to a CreateChirpParams struct because the autogenerated code was not detecting the user_id in the json request
	params.Body = requestBody.Body
	params.UserID = requestBody.UserID
	if err != nil {
		log.Printf("Error decoding parameters: %s", err)
		writer.WriteHeader(http.StatusInternalServerError)
		return
	}

	valid := false
	if len(params.Body) <= 140 {
		valid = true
	}
	errorString := ""
	if !valid {
		errorString = "Chirp is too long"
		writer.WriteHeader(http.StatusBadRequest)
	}
	params.Body = handler.SwearReplacement(params.Body)

	context := request.Context()
	chirp, err := cfg.dbQueries.CreateChirp(context, params)

	if err != nil {
		log.Printf("Error creating chirp: %s", err)
	}
	responseBody := ResponseBody{
		Chirp: Chirp{ID: chirp.ID,
			CreatedAt: chirp.CreatedAt,
			UpdatedAt: chirp.UpdatedAt,
			Body:      chirp.Body,
			UserID:    chirp.UserID},
		Error: errorString,
	}

	data, err := json.Marshal(responseBody)
	if err != nil {
		log.Printf("Error marshalling JSON: %s", err)
		writer.WriteHeader(http.StatusInternalServerError)
		return
	}

	writer.Header().Add("Content-Type", "application/json")
	writer.WriteHeader(http.StatusCreated)
	writer.Write(data)
}

func main() {
	godotenv.Load()
	dbURL := os.Getenv("DB_URL")
	db, err := sql.Open("postgres", dbURL)
	if err != nil {
		fmt.Println(err)
	}
	dbQueries := database.New(db)
	port := "8080"
	filePathRoot := "."
	apiCfg := &apiConfig{
		dbQueries: *dbQueries,
		platform:  os.Getenv("PLATFORM"),
	}
	serveMux := http.NewServeMux()
	server := &http.Server{
		Addr:    ":" + port,
		Handler: serveMux,
	}

	//appHandler := http.StripPrefix("/app", http.FileServer(http.Dir(filePathRoot)))
	serveMux.Handle("/app/", apiCfg.middleWareMetricsInc(http.StripPrefix("/app", http.FileServer(http.Dir(filePathRoot)))))

	serveMux.HandleFunc("GET /api/healthz", handler.Ready)
	serveMux.HandleFunc("GET /admin/metrics", apiCfg.HitMetrics)
	serveMux.HandleFunc("POST /admin/reset", apiCfg.Reset)
	//serveMux.HandleFunc("POST /api/validate_chirp", handler.ValidateChirp)
	serveMux.HandleFunc("POST /api/users", apiCfg.CreateUser)
	serveMux.HandleFunc("POST /api/chirps", apiCfg.CreateChirp)

	err = server.ListenAndServe()
	if err != nil {
		fmt.Println(err.Error())
	}
}
